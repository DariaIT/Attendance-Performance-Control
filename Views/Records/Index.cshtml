@using Microsoft.AspNetCore.Razor.Language.Extensions
@using Microsoft.EntityFrameworkCore.Query.Internal
@using X.PagedList.Mvc.Core;
@using X.PagedList;
@using X.PagedList.Web.Common
@model IPagedList<Attendance_Performance_Control.Models.UserRecordViewModel>

@{
    ViewData["Title"] = "Livro de Ponto";
}

<!--Show errors on fail or success-->
@{
    if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
            @TempData["Success"]
        </div>
    }
    if (TempData["Failure"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
            @TempData["Failure"]
        </div>
    }
}
<!--End Show errors on fail or success-->

<div class="row pt-5 pb-3 pr-2 pl-2 animate__animated animate__fadeIn">
    <div class="col-6">
        <!--Search by Date - submit by jquery function-->
        <form id="dateRangePicker" asp-action="Index" method="get">
            <div class="form-group d-inline-flex flex-nowrap">
                <input id="bootstrap_daterange_calendar" type="text" name="dateRangeSearch" class="form-control" value="@ViewData["dateRangeSearch"]" />
                <label for="bootstrap_daterange_calendar">
                    <i class="fa fa-calendar-alt fa-2x pl-1 pt-1 icone"></i>
                </label>
            </div>
        </form>
        <!--End Search by Date-->
    </div>
    <div class="col-6">
        <!--Timer-->
        <form method="post" class="float-right form-inline">
            <div id="timer" class="text-dark pr-2">
                <span id="hour">00</span> : <span id="minute">00</span> : <span id="seconds">00</span>
            </div>
            <button type="submit" id="start-btn" class="btn btn-primary" asp-action="Index" asp-route-start="1" asp-route-page="@Context.Request.Query["page"]" asp-route-dateSortParam="@Context.Request.Query["dateSortParam"]" asp-route-dateRangeSearch="@ViewData["dateRangeSearch"]">
                Start
            </button>
            <button type="submit" id="stop-btn" class="btn btn-primary" style="display:none" asp-action="Index" asp-route-start="0" asp-route-page="@Context.Request.Query["page"]" asp-route-dateSortParam="@Context.Request.Query["dateSortParam"]" asp-route-dateRangeSearch="@ViewData["dateRangeSearch"]">
                Stop
            </button>
        </form>
        <!-- End Timer-->
    </div>
</div>

<!--Records Table-->
<div class="table-responsive animate__animated animate__fadeIn">
    <table class="table table-bordered table-striped table-hover text-center">
        <thead class="thead-light">
            <tr>
                <th></th>
                <th scope="col">
                    <a class="sortLink icone" asp-action="Index" asp-route-dateSortParam="@ViewData["dateSortParam"]" asp-route-dateRangeSearch="@ViewData["dateRangeSearch"]">
                        Data
                        <i class="fa fa-sort-amount-down"></i>
                    </a>
                </th>
                <th scope="col">
                    Início
                </th>
                <th scope="col">
                    Explicação do atraso
                </th>
                <th scope="col">
                    Fim
                </th>
                <th scope="col">
                    Explicação de saida prévia
                </th>
                <th scope="col">
                    Total
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {

                <tr class="recordLine" data-toggle="collapse" data-target="@String.Concat(".collapseListIntervals", @item.Data.Date.Day, @item.Data.Date.Month, @item.Data.Date.Year)" role="button" aria-expanded="false" aria-controls="@String.Concat(".collapseListIntervals", @item.Data.Date.Day, @item.Data.Date.Month, @item.Data.Date.Year)">


                    @if (item.IntervalsList.Count > 0)
                    {
                        <td>
                            <i class="fa fa-caret-right"></i>

                        </td>
                    }
                    else
                    {
                        <td></td>
                    }
                    <td>
                        @item.DayStartTime.ToShortDateString()
                    </td>
                    <td>
                        @{
                            var atrasoStyle = item.StartDayDelayFlag && String.IsNullOrEmpty(item.StartDayDelayExplanation) ? "text-danger atraso" : "";
                        }
                        <div class="@atrasoStyle">@item.DayStartTime.ToShortTimeString()</div>
                    </td>
                    <td>
                        @{if (item.StartDayDelayFlag)
                            {
                                @item.StartDayDelayExplanation
                                <a class="btn p-0" title="Adicionar Explicação" asp-controller="Records" asp-action="DelayExpl" asp-route-data="@item.Data.ToShortDateString()" asp-route-StartDayDelayFlag="@item.StartDayDelayFlag" asp-route-dateRangeSearch="@ViewData["dateRangeSearch"]" asp-route-page="@Context.Request.Query["page"]">
                                    <i style="font-size:16px" class="fa fa-edit icone"></i>
                                </a>
                            }
                        }
                    </td>
                    <td>
                        @{
                            atrasoStyle = item.EndDayDelayFlag && String.IsNullOrEmpty(item.EndDayDelayExplanation) ? "text-danger atraso" : "";
                        }
                        <div class="@atrasoStyle">@item.DayEndTime.Value.ToShortTimeString()</div>
                    </td>
                    <td>
                        @{if (item.EndDayDelayFlag)
                            {
                                @item.EndDayDelayExplanation
                                <a class="btn p-0" title="Adicionar Explicação" asp-controller="Records" asp-action="DelayExpl" asp-route-data="@item.Data.ToShortDateString()" asp-route-EndDayDelayFlag="@item.EndDayDelayFlag" asp-route-dateRangeSearch="@ViewData["dateRangeSearch"]" asp-route-page="@Context.Request.Query["page"]">
                                    <i style="font-size:16px" class="fa fa-edit icone"></i>
                                </a>
                            }
                        }
                    </td>
                    <td>
                        @item.TotalHoursPorDay
                    </td>

                </tr>

                @if (item.IntervalsList.Count > 0)
                {
                    <tr class="table-light collapse @String.Concat("collapseListIntervals", @item.Data.Date.Day, @item.Data.Date.Month, @item.Data.Date.Year)">
                        <td class="font-weight-bold" colspan="7">Intervalos</td>
                    </tr>
                    @foreach (var interval in item.IntervalsList)
                    {

                        <tr class="table-light collapse @String.Concat("collapseListIntervals", @item.Data.Date.Day, @item.Data.Date.Month, @item.Data.Date.Year)">
                            <td></td>
                            <td>
                                @interval.IntervalType
                                <a class="btn p-0" title="Adicionar Tipo de Intervalo" asp-controller="Records" asp-action="IntervalTypeSet" asp-route-id="@interval.Id" asp-route-dateRangeSearch="@ViewData["dateRangeSearch"]" asp-route-page="@Context.Request.Query["page"]">
                                    <i style="font-size:16px" class="fa fa-edit icone"></i>
                                </a>
                            </td>
                            <td>
                                @interval.StartTime.ToShortTimeString()
                            </td>
                            <td></td>
                            <td>
                                @interval.EndTime.ToShortTimeString()
                            </td>
                            <td></td>
                            <td>
                                @{
                                    var totalIntervalTime = interval.StartTime - interval.EndTime;
                                    var totalTime = totalIntervalTime.ToString("hh\\:mm\\:ss");
                                    @Html.Raw(@totalTime)
                                }
                            </td>
                        </tr>
                    }


                }
            }
        <tbody />
    </table>
</div>
<!--End Records Table-->
<!--Pagging-->
<div class="float-right">
    @Html.PagedListPager((IPagedList)Model, page => Url.Action("Index",
       new
       {
           page,
           dateSortParam = Context.Request.Query["dateSortParam"],
           dateRangeSearch = Context.Request.Query["dateRangeSearch"]
       }),
     new PagedListRenderOptionsBase
     {
         LiElementClasses = new string[] { "page-item" },
         PageClasses = new string[] { "page-link" },
         Display = PagedListDisplayMode.IfNeeded

     })
</div>
<!--End Pagging-->


@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script type="text/javascript">

        $(document).ready(function () {
            //change icon on data column search
            var param = getUrlParameter("dateSortParam");
            if (param === "data_asc") {
                $(this).find('.sortLink i').toggleClass('fa-sort-amount-down fa-sort-amount-up-alt');
            }


            //Initialize portuguese date translation
            moment.locale('pt');

            //bootstrap-daterange picker
            $('input[name="dateRangeSearch"]').daterangepicker({
                autoApply: true,
                showCustomRangeLabel: false,
                "alwaysShowCalendars": true,
                //"startDate": moment().startOf('month'),
                //"endDate": moment().endOf('month'),
                "ranges": {
                    'Hoje': [moment(), moment()],
                    'Ontem': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                    'Esta semana': [moment().startOf('week'), moment().endOf('week')],
                    'Semana passada': [moment().startOf('week').subtract(1, 'week'), moment().endOf('week').subtract(1, 'week')],
                    'Este mês': [moment().startOf('month'), moment().endOf('month')],
                    'Mês passado': [moment().startOf('month').subtract(1, 'month'), moment().endOf('month').subtract(1, 'month')],
                    'Este ano': [moment().startOf('year'), moment().endOf('year')],
                    'Ano passado': [moment().startOf('year').subtract(1, 'year'), moment().endOf('year').subtract(1, 'year')]
                },
                "locale": {
                    "format": "DD/MM/YYYY",
                    "separator": " - ",
                    "daysOfWeek": [
                        "Dom",
                        "Seg",
                        "Ter",
                        "Qua",
                        "Qui",
                        "Sex",
                        "Sáb"
                    ],
                    "monthNames": [
                        "Janeiro",
                        "Fevereiro",
                        "Março",
                        "Abril",
                        "Posso",
                        "Junho",
                        "Julho",
                        "Agosto",
                        "Setembro",
                        "Outubro",
                        "Novembro",
                        "Dezembro"
                    ],
                    "firstDay": 1
                },
            }, function (start, end, label) {

            });

            //this function is called every time client choose new date period
            //automatic form get submit to Index Controller, date is passed via ViewData["dateRangeSearch"]
            $('input[name="dateRangeSearch"]').on('apply.daterangepicker', function (ev, picker) {
                $("#dateRangePicker").submit();
            });

        });


        //change icon on record line on click
        $('.recordLine').click(function(event) {
            $(this).find('i').toggleClass('fa-caret-right fa-caret-down');
        });





        //function to get values from Url by parameter name (var tech = getUrlParameter('technology');)
        var getUrlParameter = function getUrlParameter(sParam) {
            var sPageURL = window.location.search.substring(1),
                //string array with parameters splited by &
                sURLVariables = sPageURL.split('&'),
                sParameterName,
                i;

            for (i = 0; i < sURLVariables.length; i++) {
                //get parameter value
                sParameterName = sURLVariables[i].split('=');

                //if our parameter exist but undefined - return false, otherwise decode e return string value
                if (sParameterName[0] === sParam) {
                    return sParameterName[1] === undefined ? false : decodeURIComponent(sParameterName[1]);
                }
            }
            //return false if parameter not in URL
            return false;
        };



        //change icon on sort data on click
        //$('#sortLink').click(function (event) {
        //    $(this).find('i').toggleClass('fa-sort-amount-down fa-sort-amount-up-alt');
        //});

        //function responsible for timer
        window.onload = () => {
            let hour = 0;
            let minute = 0;
            let seconds = 0;
            let totalSeconds = @ViewBag.totalSeconds;
            let intervalId = null;

            $(this).toggleClass('expand').nextUntil('tr.header').fadeToggle(100);

            //if timer running on page open
            if (@ViewBag.totalSeconds != 0) {
                intervalId = setInterval(startTimer, 1000);
                //hide start button
                var x = document.getElementById('start-btn');
                x.style.display = "none";
                //show stop button
                var y = document.getElementById('stop-btn');
                y.style.display = "inline";
            }


            function startTimer() {
                ++totalSeconds;
                hour = Math.floor(totalSeconds / 3600);
                minute = Math.floor((totalSeconds - hour * 3600) / 60);
                seconds = totalSeconds - (hour * 3600 + minute * 60);

                //format date 01, 02, 03 ...
                if (seconds < 10) {
                    seconds = "0" + seconds;
                }
                if (minute < 10) {
                    minute = "0" + minute;
                }
                if (hour < 10) {
                    hour = "0" + hour;
                }

                document.getElementById("hour").innerHTML = hour;
                document.getElementById("minute").innerHTML = minute;
                document.getElementById("seconds").innerHTML = seconds;
            }
        }

    </script>
}
