@model IEnumerable<ReportsViewModel>
@{
    ViewData["Title"] = "Relatório";
}

<!--Show errors on fail or success-->
@{
    if (TempData["Success"] != null)
    {
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
        @TempData["Success"]
    </div>
    }
    if (TempData["Failure"] != null)
    {
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
        @TempData["Failure"]
    </div>
    }
}
<!--End Show errors on fail or success-->


<div class="p-2 animate__animated animate__fadeIn">

    <form id="dateRangePicker" asp-action="Index" method="post">
        <div class="row">
            <!--Filter by Date - submit by jquery function-->
            <div class="col-6 col-md-3">
                <div class="input-group">
                    <input id="bootstrap_daterange_calendar" type="text" name="dateRangeSearch" class="form-control" value="@ViewData["dateRangeSearch"]" />
                    <div class="input-group-append pt-1">
                        <label for="bootstrap_daterange_calendar">
                            <i class="fa fa-calendar-alt fa-2x pl-1 icone"></i>
                        </label>
                    </div>
                </div>
            </div>
            <!--End Filter by Date-->
            @if ((bool)ViewData["IsAdmin"])
            {
                <!--Filter by User Id-Name-->
            <div class="col-6 col-md-3">
                <div class="input-group">
                    <select id="searchByUser" name="searchByUser" value="@ViewData["searchByUser"]" class="form-control" asp-items="@ViewData["Users"] as SelectList">
                        <option value="@String.Empty">Todos</option>
                    </select>
                    <div class="input-group-append">
                        <label for="searchByUser">
                            <i class="fa fa-user fa-2x pl-1 pt-1 icone"></i>
                        </label>
                    </div>
                </div>
            </div>
 <!--End Filter by User Id-Name-->
 <!--Filter by Department-->
            <div class="col-6 col-md-3">
                <div class="input-group">
                    <select id="searchByDept" name="searchByDept" value="@ViewData["searchByDept"]" class="form-control" asp-items="@ViewData["Departments"] as SelectList">
                        <option value="@String.Empty">Todos</option>
                    </select>
                    <div class="input-group-append">
                        <label for="searchByDept">
                            <i class="fa fa-building fa-2x pl-1 pt-1 icone"></i>
                        </label>
                    </div>
                </div>
            </div>
 <!--End Filter by Department-->
            }
            <div class="col-6 col-md-3">
                <input type="submit" value="Filtrar" class="btn btn-primary" />
            </div>
        </div>
    </form>
</div>

<!--Bar Chart-->
<div class="col-12">
    <div class="ibox ">
        <div class="ibox-title">
            <h5 class="pr-3">Total Trabalho(h): @ViewData["TotalWork"] </h5>
            <h5>Total Intervalos(h): @ViewData["TotalIntervals"]</h5>
        </div>
        <div class="ibox-content">
            <div>
                <canvas id="barChart" height="100"></canvas>
            </div>
        </div>
    </div>
</div>
<!--End Bar Chart-->
<!--Start Reports Table-->
<table id="ReportsTable" class="table table-striped table-bordered dt-responsive table-hover animate__animated animate__fadeIn" width="100%" cellspacing="0">
    <thead class="thead-light">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Data)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.UserDepartment)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.UserOccupation)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.DayStartTime)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.StartDayDelayExplanation)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.DayEndTime)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.EndDayDelayExplanation)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.TotalHoursForIntervals)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.TotalHoursForWork)
            </th>
            <th>
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Data)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.UserDepartment)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.UserOccupation)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DayStartTime)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.StartDayDelayExplanation)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DayEndTime)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.EndDayDelayExplanation)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.TotalHoursForIntervals)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.TotalHoursForWork)
                </td>
                <td>
                    <a class="btn p-0" title="Ver Detalhes" asp-controller="Reports" asp-action="DetailsRecord" asp-route-Id="@item.DayRecordsId" asp-route-dateRangeSearch="@ViewData["dateRangeSearch"]" asp-route-searchByUser="@ViewData["searchByUser"]" asp-route-searchByDept="@ViewData["searchByDept"]">
                        <i style="font-size:16px" class="fa fa-info-circle icone"></i>
                    </a>
                </td>
            </tr>
        }
    </tbody>
</table>
<!--End Reports Table-->


@section Scripts {

    <script type="text/javascript">

        $(document).ready(function () {

            //Initialize portuguese date translation
            moment.locale('pt');

            //bootstrap-daterange picker
            $('input[name="dateRangeSearch"]').daterangepicker({
                autoApply: true,
                showCustomRangeLabel: false,
                "alwaysShowCalendars": true,
                //"startDate": moment().startOf('month'),
                //"endDate": moment().endOf('month'),
                "ranges": {
                    'Ontem': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                    'Esta semana': [moment().startOf('week'), moment().endOf('week')],
                    'Semana passada': [moment().startOf('week').subtract(1, 'week'), moment().endOf('week').subtract(1, 'week')],
                    'Este mês': [moment().startOf('month'), moment().endOf('month')],
                    'Mês passado': [moment().startOf('month').subtract(1, 'month'), moment().endOf('month').subtract(1, 'month')],
                    'Este ano': [moment().startOf('year'), moment().endOf('year')],
                    'Ano passado': [moment().startOf('year').subtract(1, 'year'), moment().endOf('year').subtract(1, 'year')]
                },
                "locale": {
                    "format": "DD/MM/YYYY",
                    "separator": " - ",
                    "daysOfWeek": [
                        "Dom",
                        "Seg",
                        "Ter",
                        "Qua",
                        "Qui",
                        "Sex",
                        "Sáb"
                    ],
                    "monthNames": [
                        "Janeiro",
                        "Fevereiro",
                        "Março",
                        "Abril",
                        "Posso",
                        "Junho",
                        "Julho",
                        "Agosto",
                        "Setembro",
                        "Outubro",
                        "Novembro",
                        "Dezembro"
                    ],
                    "firstDay": 1
                },
            }, function (start, end, label) {

            });



            //bar chart

            function dateFormatYAxisTooltip(value) {
                //hours
                var hoursInt = Math.floor(value);
                //minuts
                var hoursRest = value - hoursInt;
                var minuts = Math.round(hoursRest * 60);
                return hoursInt + "h" + minuts + "min";
            };


            var graficUnit = @ViewData["GraficDays"] < 62 ? 'day' : 'month';
            var dataJson = @Html.Raw(@ViewData["JsonDataForGrafic"]);
            var barData = {
                //labels: ["Seg", "Ter", "Qua", "Qui", "Sex", "Sáb", "Dom"],
                datasets: [
                    {
                        label: "Horas",
                        backgroundColor: 'rgba(26,179,148,0.5)',
                        borderColor: "rgba(26,179,148,0.7)",
                        pointBackgroundColor: "rgba(26,179,148,1)",
                        pointBorderColor: "#fff",
                        //data: [2.30, 3.30, 4.30, 5.30, 6.30]
                        data: dataJson
                    }
                ]
            };

            var barOptions = {
                responsive: true,
                scales: {
                    xAxes: [{
                        type: "time",
                        offset: true,
                        time: {
                            unit: graficUnit,
                            tooltipFormat: "ddd, DD MMM YYYY",
                            format: "DD/MM/YYYY", //format for json date 31/01/2020
                            displayFormats: {
                                day: "ddd, DD MMM", //format for X Axis
                                month: 'MMM YYYY'
                            }
                        }
                    }],
                    yAxes: [{
                        ticks: {
                            beginAtZero: true,
                            callback: function (label, index, labels) {
                                return label + "h";
                            }
                        },
                    }]
                },
                tooltips: {
                    callbacks: {
                        label: (tooltipItem, data) => {
                            var value = tooltipItem.yLabel;
                            return dateFormatYAxisTooltip(value);
                        }
                    }
                },
            };

            var ctx2 = document.getElementById("barChart").getContext("2d");
            new Chart(ctx2, { type: 'bar', data: barData, options: barOptions });


            $('#ReportsTable').DataTable({
                "language": {
                    "lengthMenu": "Mostrar _MENU_ Registros por página",
                    "search": "Procurar",
                    "paginate": { "previous": "Anterior", "next": "Próximo" },
                    "zeroRecords": "Nada foi encontrado",
                    "info": "Página _PAGE_ de _PAGES_",
                    "infoEmpty": "Sem registros",
                    "infoFiltered": "(filtrado de _MAX_ regitros totais)",
                    "buttons": {
                        copyTitle: 'Copiado para a área de transferência',
                        copySuccess: {
                            _: '%d linhas copiadas para a área de transferência',
                            1: '1 linha copiada para a área de transferência'
                        }
                    }
                },
                "columnDefs": [{
                    "targets": 9,
                    "orderable": false
                }],
                dom: 'lBfrtip',
                buttons: [
                    {
                    extend: 'pdf',
                    title: "Relatorio - Prévia Safe - Saúde Ocupacional, Higiene e Segurança S. A.",
                    filename: "Relatorio-Previa-Safe",
                    messageTop: function () {
                        var data = '@Html.Raw(ViewData["ReportData"])';
                        var name = '@Html.Raw(ViewData["ReportName"])';
                        var depart = '@Html.Raw(ViewData["ReportDepart"])';
                        var occup = '@Html.Raw(ViewData["ReportOccup"])';
                        var totalWork = '@Html.Raw(ViewData["TotalWork"])';
                        var totalInterv = '@Html.Raw(ViewData["TotalIntervals"])';
                        return 'Data: ' + data + '\n' + 'Nome: ' + name + '\n' + 'Departamento: ' + depart + '\n' +
                             'Cargo: ' + occup + '\n' + 'Total Trabalho(h): ' + totalWork + '\n' +
                             'Total Intervalos(h): ' + totalInterv + '\n';
                        }
                }, {
                    extend: 'excel',
                    title: "Relatorio - Prévia Safe - Saúde Ocupacional, Higiene e Segurança S. A.",
                    filename: "Relatorio-Previa-Safe",                   
                    messageTop: function () {
                        var data = '@Html.Raw(ViewData["ReportData"])';
                        var name = '@Html.Raw(ViewData["ReportName"])';
                        var depart = '@Html.Raw(ViewData["ReportDepart"])';
                        var occup = '@Html.Raw(ViewData["ReportOccup"])';
                        var totalWork = '@Html.Raw(ViewData["TotalWork"])';
                        var totalInterv = '@Html.Raw(ViewData["TotalIntervals"])';
                        return 'Data: ' + data + ',  ' + 'Nome: ' + name + ',  ' + 'Departamento: ' + depart + ',  ' +
                            'Cargo: ' + occup + ',  ' + 'Total Trabalho(h): ' + totalWork + ',  ' +
                             'Total Intervalos(h): ' + totalInterv;
                        }
                },
                    {
                        extend: 'copy',
                        title: "Relatorio - Prévia Safe - Saúde Ocupacional, Higiene e Segurança S. A.",
                        text: '<i class="far fa-copy" style="font-size:14px"></i>',
                        titleAttr: 'Copiar',
                        messageTop: function () {
                        var data = '@Html.Raw(ViewData["ReportData"])';
                        var name = '@Html.Raw(ViewData["ReportName"])';
                        var depart = '@Html.Raw(ViewData["ReportDepart"])';
                        var occup = '@Html.Raw(ViewData["ReportOccup"])';
                        var totalWork = '@Html.Raw(ViewData["TotalWork"])';
                        var totalInterv = '@Html.Raw(ViewData["TotalIntervals"])';
                        return 'Data: ' + data + '\n' + 'Nome: ' + name + '\n' + 'Departamento: ' + depart + '\n' +
                             'Cargo: ' + occup + '\n' + 'Total Trabalho(h): ' + totalWork + '\n' +
                             'Total Intervalos(h): ' + totalInterv + '\n';
                        }
                },
                   {
                       extend: 'print',
                       title: "Relatorio - Prévia Safe - Saúde Ocupacional, Higiene e Segurança S. A.",
                       text: '<i class="fas fa-print" style="font-size:14px"></i>',
                       titleAttr: 'Imprimir',
                       exportOptions: {
                           stripHtml: false
                       },
                       customize: function (win) {
                           $(win.document.body).css('background', '#ffffff');
                       },
                        messageTop: function () {
                        var data = '@Html.Raw(ViewData["ReportData"])';
                        var name = '@Html.Raw(ViewData["ReportName"])';
                        var depart = '@Html.Raw(ViewData["ReportDepart"])';
                        var occup = '@Html.Raw(ViewData["ReportOccup"])';
                        var totalWork = '@Html.Raw(ViewData["TotalWork"])';
                        var totalInterv = '@Html.Raw(ViewData["TotalIntervals"])';
                            return 'Data: ' + data + '</br>' + 'Nome: ' + name + '</br>' + 'Departamento: ' + depart + '</br>' +
                                'Cargo: ' + occup + '</br>' + 'Total Trabalho(h): ' + totalWork + '</br>' +
                                'Total Intervalos(h): ' + totalInterv + '</br>';
                        }
                    }]
            });
        });



    </script>
}